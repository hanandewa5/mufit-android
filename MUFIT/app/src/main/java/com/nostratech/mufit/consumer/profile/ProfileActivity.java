package com.nostratech.mufit.consumer.profile;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.inputmethod.EditorInfo;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.ScrollView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;
import androidx.core.content.FileProvider;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;

import com.nostratech.mufit.consumer.BuildConfig;
import com.nostratech.mufit.consumer.R;
import com.nostratech.mufit.consumer.base.MyToolbarBackActivity;
import com.nostratech.mufit.consumer.body_composition.BodyCompositionActivity;
import com.nostratech.mufit.consumer.change_password.ChangePasswordActivity;
import com.nostratech.mufit.consumer.model.ProfileModel;
import com.nostratech.mufit.consumer.utils.Constants;
import com.nostratech.mufit.consumer.utils.FileUtils;
import com.nostratech.mufit.consumer.utils.glidehelper.GlideApp;
import com.theartofdev.edmodo.cropper.CropImage;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Objects;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;
import id.mufit.core.dialog.MufitDialogNoButton;
import id.mufit.core.dialog.MufitDialogOneButtonWithText;
import id.mufit.core.dialog.MufitDialogTwoButtons;
import id.mufit.core.dialog.MufitDialogTwoButtonsWithText;

//Referensi compress dan scale image:
//https://stackoverflow.com/questions/28424942/decrease-image-size-without-losing-its-quality-in-android

public class ProfileActivity extends MyToolbarBackActivity implements ProfileContract.View {

    static final double PROFILE_PIC_SIZE = 400.0;

    static final int PROFILE_PIC_GALLERY_REQUEST_CODE = 1;
    static final int PROFILE_PIC_CAMERA_REQUEST_CODE = 2;
    private static final String TAG = ProfileActivity.class.getSimpleName();
    private static final int IMAGE_COMPRESSION_QUALITY = 40;

    @BindView(R.id.toolbar)
    Toolbar toolbar;

    @BindView(R.id.profile_image)
    ImageView profileImage;
    @BindView(R.id.text_nama)
    EditText editTextNama;
    @BindView(R.id.text_email)
    EditText editTextEmail;
    @BindView(R.id.text_telepon)
    EditText editTextTelepon;

    @BindView(R.id.swipeRefresh_profile)
    SwipeRefreshLayout swipeRefreshProfile;
    @BindView(R.id.layout_scroll)
    ScrollView layoutScroll;
    @BindView(R.id.progressBar_loading)
    ProgressBar progressBarLoading;
    @BindView(R.id.layout_noInternet)
    LinearLayout layoutNoInternet;

    @BindView(R.id.profile_btn_showBodyComp)
    Button btnShowBodyComp;

    ProfileContract.Presenter presenter;

    //Compared against value obtained from EditTexts to determine whether to show "Unsaved Changes" dialog or not
    String originalFullName, originalPhone, originalEmail;

    //Used to store camera image file path generated by FileUtils
    //Later used to find the image in onActivityResult
    String cameraImageFilePath;

    //Image in compressed form to be uploaded
    File imageToBeUploaded;
    String customerId;
    int versionTemp;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_profile);
        ButterKnife.bind(this);
        initToolbar(toolbar);

        presenter = new ProfilePresenter(this, this, this);
        presenter.getProfileDetail();

        swipeRefreshProfile.setColorSchemeResources(R.color.orange);
        swipeRefreshProfile.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
            @Override
            public void onRefresh() {
                layoutScroll.setVisibility(android.view.View.VISIBLE);
//                layoutNoInternet.setVisibility(View.GONE);

                presenter.getProfileDetail();

                swipeRefreshProfile.setRefreshing(false);
            }
        });

        setActionDoneDismissKeyboard();
    }


    private void setActionDoneDismissKeyboard() {
        editTextTelepon.setOnEditorActionListener((v, actionId, event) -> {
            if (actionId == EditorInfo.IME_ACTION_DONE) {
                //Clear focus here from edittext
                editTextTelepon.clearFocus();
                dismissKeyboard();
            }
            return false;
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(R.menu.toolbar_profile, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        //TODO: add email to if else
        if (item.getItemId() == R.id.toolbarProfileItem) {
            if (!editTextNama.getText().toString().equals(originalFullName)
                    || !editTextTelepon.getText().toString().equals(originalPhone)
                    || imageToBeUploaded != null
            ) {

                MufitDialogTwoButtonsWithText dialog = new MufitDialogTwoButtonsWithText(this,
                        getString(R.string.confirmation),
                        getString(R.string.apply_changes_for_toolbar_menu));

                dialog.getBtnPositive().setOnClickListener(l -> {
                    String fullName = editTextNama.getText().toString();
                    String phone = editTextTelepon.getText().toString();
                    String email = null; //TODO: input originalEmail

                    presenter.initiateUpdateProcess(customerId, fullName, phone, email, imageToBeUploaded, versionTemp);
                    dialog.dismiss();
                });

                dialog.show();

            } else {
                showToastMessageLong(getResources().getString(R.string.apply_changes_for_toolbar_menu_denied));
            }
        }
        return super.onOptionsItemSelected(item);
    }

    @Override
    public void showLoading() {
        progressBarLoading.setVisibility(android.view.View.VISIBLE);
        layoutScroll.setVisibility(android.view.View.GONE);
        layoutNoInternet.setVisibility(android.view.View.GONE);
    }

    @Override
    public void dismissLoading() {
        progressBarLoading.setVisibility(View.GONE);
        layoutScroll.setVisibility(View.VISIBLE);
    }

    @Override
    public void showNoInternetError() {
        layoutScroll.setVisibility(View.GONE);
        layoutNoInternet.setVisibility(android.view.View.VISIBLE);
    }

    @Override
    public void showProfileDetail(ProfileModel profileModel) {
        editTextNama.setText(String.valueOf(profileModel.getFullName()));
        editTextEmail.setText(String.valueOf(profileModel.getEmail()));
        editTextTelepon.setText(String.valueOf(profileModel.getPhone()));

        if (profileModel.getPhotoSelfie() != null) {
            GlideApp.with(this)
                    .load(profileModel.getPhotoSelfie())
                    .placeholder(R.color.preload_image_gray)
                    .centerCrop()
                    .into(profileImage);
        }

        imageToBeUploaded = null;
        customerId = String.valueOf(profileModel.getId());
        versionTemp = profileModel.getVersion();

        originalFullName = String.valueOf(profileModel.getFullName());
        originalPhone = String.valueOf(profileModel.getPhone());
        originalEmail = profileModel.getEmail();
        dismissLoading();
    }

    @Override
    public void showEditProfileSuccessMessage() {
        MufitDialogOneButtonWithText dialog = new MufitDialogOneButtonWithText(this,
                null,
                getString(R.string.edit_profile_success));

        dialog.getButton().setOnClickListener(l -> {
            dismissLoading();
            presenter.getProfileDetail();
            dialog.dismiss();
        });

        dialog.show();
    }

    @Override
    public void showButtonCheckBcm(String b2bId) {
        btnShowBodyComp.setVisibility(View.VISIBLE);
        btnShowBodyComp.setOnClickListener(l -> {
            Intent i = new Intent(this, BodyCompositionActivity.class);
            i.putExtra(Constants.B2B.KEY_USER_ID, b2bId);
            showActivity(i);
        });
    }

    @Override
    public void hideButtonCheckBcm() {
        btnShowBodyComp.setVisibility(View.GONE);
    }

    @Override
    public void onBackPressed() {
        //Check if there are unsaved changes
        String currentName = editTextNama.getText().toString();
        String currentPhone = editTextTelepon.getText().toString();
        String currentEmail = editTextEmail.getText().toString();

        if (imageToBeUploaded != null || !currentName.equals(originalFullName)
                || !currentEmail.equals(originalEmail) || !currentPhone.equals(originalPhone)) {
            MufitDialogTwoButtons dialog = new MufitDialogTwoButtons(this,
                    getString(R.string.confirmation),
                    R.layout.dialog_unsaved_changes);

            dialog.getBtnPositive().setOnClickListener(l ->{
                dialog.dismiss();
                finishActivity();
            });

            dialog.show();
        } else {
            finishActivity();
        }


    }

    //OnClick listeners for Layouts that contain the EditText
    //When these layouts are clicked, assign focus to the EditText contained inside it
    @OnClick({R.id.layout_nama, R.id.layout_email, R.id.layout_telepon})
    public void focusOnEditText(android.view.View view) {
        EditText editText = null;
        switch (view.getId()) {
            case R.id.layout_nama:
                editText = editTextNama;
                break;
            case R.id.layout_telepon:
                editText = editTextTelepon;
                break;
            case R.id.layout_email:
                editText = editTextEmail;
                break;
            default:
                showToastMessageLong("focusOnEditText default case");
        }

        //Move screen towards the edit text
        editText.requestFocus();

        //Move cursor/caret to the end of edit text
        editText.setSelection(editText.length());

        //Show soft keyboard
        showKeyboard();
    }

    @OnClick({R.id.layout_password, R.id.edit_profile_image, R.id.profile_image})
    public void onViewClicked(android.view.View view) {
        switch (view.getId()) {
            case R.id.layout_password:
                Intent intent = new Intent(this, ChangePasswordActivity.class);
                showActivity(intent);
                break;
            case R.id.edit_profile_image:
            case R.id.profile_image:
                showProfileImageSourceDialog();
                break;
            case R.id.profile_btn_showBodyComp:
                Intent i = new Intent(this, BodyCompositionActivity.class);
                showActivity(i);
                break;
        }
    }

    private void showProfileImageSourceDialog() {
        MufitDialogNoButton dialog = new MufitDialogNoButton(this,
                getString(R.string.profile_pic_image_src),
                R.layout.dialog_profile_pic_source
        );

        View camera = dialog.getBody().findViewById(R.id.camera);
        View gallery = dialog.getBody().findViewById(R.id.gallery);
        gallery.setOnClickListener(v -> {
            dialog.dismiss();
            openGallery(PROFILE_PIC_GALLERY_REQUEST_CODE);
        });
        camera.setOnClickListener(v -> {
            dialog.dismiss();
            openCamera(PROFILE_PIC_CAMERA_REQUEST_CODE);
        });

        dialog.show();
    }

    private void openGallery(int requestCodeGallery) {
        //......
        //Check and ask for permissions in version Android API 23 and above.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(this,
                    Manifest.permission.READ_EXTERNAL_STORAGE)
                    != PackageManager.PERMISSION_GRANTED) {
                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE,
                                Manifest.permission.WRITE_EXTERNAL_STORAGE},
                        requestCodeGallery);
            } else {
                startPickImageFromGalleryIntent(requestCodeGallery);
            }

        }
    }

    private void openCamera(int requestCodeCamera) {
        //......
        //Check and ask for permissions in version Android API 23 and above.
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ContextCompat.checkSelfPermission(this,
                    Manifest.permission.CAMERA)
                    != PackageManager.PERMISSION_GRANTED) {

                String[] requestedPermissions = {Manifest.permission.CAMERA};
                requestPermissions(requestedPermissions, PROFILE_PIC_CAMERA_REQUEST_CODE);

            } else {
                startImageCaptureIntent(requestCodeCamera);


            }
        }
    }

    private void startPickImageFromGalleryIntent(int requestCode) {
        Intent pictureActionIntent = new Intent(
                Intent.ACTION_PICK,
                MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        pictureActionIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        startActivityForResult(
                pictureActionIntent,
                requestCode);
    }

    private void startImageCaptureIntent(int requestCode) {
        Intent intent = new Intent(
                MediaStore.ACTION_IMAGE_CAPTURE);
        File f = null;
        try {
            f = FileUtils.createImageFile(this);

            //Store image file path to retrieve later
            cameraImageFilePath = f.getAbsolutePath();

        } catch (IOException e) {
            e.printStackTrace();
            cameraImageFilePath = null;
            Toast.makeText(this, "Failed to create image file for Camera", Toast.LENGTH_LONG).show();
        }
        if (f != null) {
            Uri photoURI = FileProvider.getUriForFile(this,
                    BuildConfig.APPLICATION_ID + ".provider",
                    f);
            intent.putExtra(MediaStore.EXTRA_OUTPUT,
                    photoURI);

            startActivityForResult(intent, requestCode);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode,
                                           @NonNull String permissions[],
                                           @NonNull int[] grantResults) {

        switch (requestCode) {
            case PROFILE_PIC_GALLERY_REQUEST_CODE:
                // If request is cancelled, the result arrays are empty.
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {


                    // permission was granted.
                    startPickImageFromGalleryIntent(PROFILE_PIC_GALLERY_REQUEST_CODE);

                } else {
                    // Permission denied - Show a message to inform the user that this app only works
                    // with these permissions granted
                    showToastMessageLong("Permission is needed to access your gallery");
                }
                break;
            case PROFILE_PIC_CAMERA_REQUEST_CODE:
                //Permission for camera is granted
                if (grantResults.length > 0
                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {

                    //Start image capture intent
                    startImageCaptureIntent(PROFILE_PIC_CAMERA_REQUEST_CODE);
                } else {
                    //Permission is denied; notify user that the Camera permission
                    //is needed to take pictures and use it as their profile image
                    showToastMessageLong("Permission required to take a picture");
                }
                break;
        }
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode == RESULT_OK) {
            switch (requestCode) {
                case CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE:
                    CropImage.ActivityResult result = CropImage.getActivityResult(data);

                    File croppedImage = new File(result.getUri().getPath());
                    try {
                        compressBitmap(croppedImage, BitmapFactory.decodeFile(croppedImage.getPath()));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    imageToBeUploaded = croppedImage;
                    GlideApp.with(this)
                            .load(imageToBeUploaded)
                            .centerCrop()
                            .into(profileImage);
                    Log.d("image", "onActivityResult: " + imageToBeUploaded.length());
                    Toast.makeText(this, "Successfully taken a picture", Toast.LENGTH_LONG).show();
                    break;
                case PROFILE_PIC_CAMERA_REQUEST_CODE:

                    //Get image file from camera
                    File capturedImageFile = new File(cameraImageFilePath);
                    if (!capturedImageFile.exists()) {
                        Log.d(TAG, "Image File from Camera not found");
                        return;
                    }

                    //Rotate the image file
                    //First, convert from file ke bitmap
                    Bitmap bitmap = BitmapFactory.decodeFile(cameraImageFilePath);

                    try {
                        //Convert rotatedBitmap into file
                        File f = FileUtils.createImageFile(this);
                        if (!f.exists()) {
                            return;
                        }

                        rotateImageAndScale(capturedImageFile, f, bitmap);

                        //implement crop activity
                        cropImage(f);

                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                    break;
                case PROFILE_PIC_GALLERY_REQUEST_CODE:
                    if (data != null) {

                        Uri selectedImage = Objects.requireNonNull(data.getData(), "Return value of intent is null");
                        String[] filePath = {MediaStore.Images.Media.DATA};

                        Cursor c = Objects.requireNonNull(getContentResolver().query(selectedImage, filePath,
                                null, null, null), "Cursor is null");
                        c.moveToFirst();
                        int columnIndex = c.getColumnIndex(filePath[0]);
                        String selectedImagePath = c.getString(columnIndex);
                        c.close();

                        File file = new File(selectedImagePath);

                        Bitmap bmp = BitmapFactory.decodeFile(selectedImagePath);
                        try {
                            File f = FileUtils.createImageFile(this);
                            if (!f.exists()) {
                                return;
                            }

                            rotateImageAndScale(file, f, bmp);

                            cropImage(f);
                        } catch (IOException e) {
                            e.printStackTrace();
                            showToastMessageLong(e.getMessage());
                        }

                    }
                    break;

                default:
                    //Throw to fragment to consume
                    showToastMessageShort("OnActivityResult goes to default");
                    break;
            }
        }
    }

    private void compressBitmap(File f, Bitmap bitmapImage) throws IOException {
        Bitmap scaled = bitmapImage.createScaledBitmap(bitmapImage, (int) PROFILE_PIC_SIZE, (int) PROFILE_PIC_SIZE, true);

        FileOutputStream fOut = new FileOutputStream(f);
        scaled.compress(Bitmap.CompressFormat.JPEG, IMAGE_COMPRESSION_QUALITY, fOut);
        fOut.close();
    }

    private void bitmapToFile(File f, Bitmap bitmap) throws IOException {
        FileOutputStream fOut = new FileOutputStream(f);
        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, fOut);
        fOut.close();
    }

    public static Bitmap rotateImage(Bitmap source, float angle) {
        Matrix matrix = new Matrix();
        matrix.postRotate(angle);
        return Bitmap.createBitmap(source, 0, 0, source.getWidth(), source.getHeight(),
                matrix, true);
    }

    private void cropImage(File f) {
        CropImage.activity(Uri.fromFile(new File(f.getPath())))
                .setAspectRatio(1, 1)
                .start(this);
    }

    private void rotateImageAndScale(File source, File target, Bitmap bmp) throws IOException {
        ExifInterface exifInterface = new ExifInterface(source.getPath());
        int orientation = exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION,
                ExifInterface.ORIENTATION_UNDEFINED);

        Bitmap rotatedBmp = null;
        switch (orientation) {

            case ExifInterface.ORIENTATION_ROTATE_90:
                rotatedBmp = rotateImage(bmp, 90);
                break;

            case ExifInterface.ORIENTATION_ROTATE_180:
                rotatedBmp = rotateImage(bmp, 180);
                break;

            case ExifInterface.ORIENTATION_ROTATE_270:
                rotatedBmp = rotateImage(bmp, 270);
                break;

            case ExifInterface.ORIENTATION_NORMAL:
                rotatedBmp = bmp;
                break;
            default:
                rotatedBmp = bmp;

        }
        bitmapToFile(target, rotatedBmp);
    }

}